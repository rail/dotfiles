--- notify.py	2014-04-09 17:27:01.072648836 -0400
+++ notify_railz.py	2014-04-18 11:19:05.949268285 -0400
@@ -33,12 +33,14 @@
 #     version 0.0.2.1: sync with last API changes
 
 # script variables
-SCRIPT_NAME = "notify"
+SCRIPT_NAME = "notify_railz"
 SCRIPT_AUTHOR = "lavaramano"
 SCRIPT_VERSION = "0.0.7"
 SCRIPT_LICENSE = "GPL"
 SCRIPT_DESC = "notify: A real time notification system for weechat"
 
+import subprocess
+from Xlib import display, Xutil
 # make sure we're run under weechat.
 import_ok = True
 try:
@@ -64,7 +66,9 @@
     "ignore_nicks_startwith"    : "*",
     "icon"                      : "/usr/share/pixmaps/weechat.xpm",
     "urgency"                   : "normal",
-    "smart_notification"        : "off"
+    "smart_notification"        : "off",
+    "player"                    : "mplayer",
+    "sound"                     : "/usr/share/sounds/purple/alert.wav",
 }
 
 urgencies = {
@@ -73,6 +77,33 @@
     "normal"   : notify2.URGENCY_NORMAL,
 }
 
+
+def find_window(name, w):
+    for win in w.query_tree().children:
+        if win.get_wm_name() and win.get_wm_name() == name:
+            return win
+
+        if len(win.query_tree().children) > 0:
+            a = find_window(name, win)
+            if a:
+                return a
+
+
+def do_set_hint(disp):
+    win = find_window("wee", disp.screen().root)
+    if not win:
+        return
+    hints = win.get_wm_hints() or {'flags': 0}
+    hints['flags'] |= Xutil.UrgencyHint
+
+    win.set_wm_hints(hints)
+    disp.flush()
+
+
+def set_hint():
+    do_set_hint(display.Display())
+
+
 # Functions
 def notify_show(data, bufferp, uber_empty, tagsn, isdisplayed, ishilight, prefix, message):
     """Sends highlighted message to be printed on notification"""
@@ -108,6 +139,10 @@
     wn.set_urgency(urgencies[weechat.config_get_plugin('urgency')] or notify2.URGENCY_NORMAL)
     # now try to show notification
     try:
+        subprocess.Popen([weechat.config_get_plugin('player'),
+                          weechat.config_get_plugin('sound')],
+                         stderr=subprocess.STDOUT, stdout=subprocess.PIPE)
+        set_hint()
         wn.show()
         return None
     except Exception, e:
